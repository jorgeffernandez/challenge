//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Challenge.Infraestructure.DataContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using Challenge.Domain.Entities;
    
    #region Custom
    using Challenge.Infraestructure.Core;
    using System.Data.Entity.Core.Objects;
    using System.Collections.Generic;
    using System.Linq;
    #endregion
    
    
    public partial class ChallengeEntities : DbContext, IDbUnitOfWork
    {
        public ChallengeEntities()
            : base("name=ChallengeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    	///ConnectionString
        public void SetConnectionString(string connectionString) {
            base.Database.Connection.ConnectionString = connectionString;
        }
    
    	 public DbSet<TEntity> CreateDbSet<TEntity>() where TEntity : class {
            return this.Set<TEntity>();
        }
            
        public void RegisterChanges<TEntity>(TEntity item) where TEntity : class {
            this.Entry<TEntity>(item).State = EntityState.Modified;
        }
        
        public void Unregister<TEntity>(TEntity item) where TEntity : class {
            this.Entry<TEntity>(item).State = EntityState.Detached;
        }
    
    	public void Commit() {
            this.SaveChanges();
        }
    
        public void CommitAndRefresh() {
            try {
                this.Commit();
            } catch (DbUpdateConcurrencyException oce) {
                this.ObjectContext.Refresh(RefreshMode.ClientWins, oce.Entries.Select(e => e.Entity));
                this.Commit();
            }
        }
    
    	 public void Rollback() {
            IEnumerable<DbEntityEntry> itemsToRefresh = this.ChangeTracker.Entries();
            this.ObjectContext.Refresh(RefreshMode.StoreWins, itemsToRefresh);
        }
        
        public ObjectContext ObjectContext {
    		get { return (this as IObjectContextAdapter).ObjectContext; }
        }
    
        public virtual DbSet<Phones> Phones { get; set; }
    }
}
